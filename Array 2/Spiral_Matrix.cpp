// Spiral traversal of matrix


/*
üß† Spiral Matrix ‚Äì Intuition and Approach

üîç Intuition:
Imagine you're peeling an onion layer by layer.

In a spiral traversal of a matrix, you start from the top-left and go:

Right ‚Üí along the top row

Down ‚Üì along the right column

Left ‚Üê along the bottom row

Up ‚Üë along the left column

Then move inward to the next layer, and repeat until all elements are visited.

üß≠ Approach (Boundaries Method):
We use 4 pointers to keep track of boundaries:

top ‚Äì starting row

bottom ‚Äì ending row

left ‚Äì starting column

right ‚Äì ending column


Then, repeat the following steps while (top <= bottom && left <= right):

üëâ Traverse left to right on top row ‚Üí for (int i = left; i <= right; i++)

top++

üëá Traverse top to bottom on right column ‚Üí for (int i = top; i <= bottom; i++)

right--

üëà Traverse right to left on bottom row (only if top <= bottom) ‚Üí for (int i = right; i >= left; i--)

bottom--

‚òù Traverse bottom to top on left column (only if left <= right) ‚Üí for (int i = bottom; i >= top; i--)

left++

Repeat until all layers are traversed.
*/

#include <bits/stdc++.h>

using namespace std;

vector<int> printSpiral(vector<vector<int>> mat) {
 
  // Define ans array to store the result.
  vector<int> ans;
 
  int n = mat.size(); // no. of nows
  int m = mat[0].size(); // no. of columns
  
  // Initialize the pointers reqd for traversal.
  int top = 0, left = 0, bottom = n - 1, right = m - 1;

  // Loop until all elements are not traversed.
  while (top <= bottom && left <= right) {
      
    // For moving left to right
    for (int i = left; i <= right; i++)
      ans.push_back(mat[top][i]);

    top++;

    // For moving top to bottom.
    for (int i = top; i <= bottom; i++)
      ans.push_back(mat[i][right]);

    right--;
    
    // For moving right to left.
    if (top <= bottom) {
      for (int i = right; i >= left; i--)
       ans.push_back(mat[bottom][i]);

      bottom--;
    }

    // For moving bottom to top.
    if (left <= right) {
      for (int i = bottom; i >= top; i--)
        ans.push_back(mat[i][left]);

      left++;
    }
  }
  return ans;
}

int main() {
    
  //Matrix initialization.
  vector<vector<int>> mat   {{1, 2, 3, 4},
                             {5, 6, 7, 8},
	                         {9, 10, 11, 12},
		                     {13, 14, 15, 16}};
		                     
  vector<int> ans = printSpiral(mat);

  for(int i = 0;i<ans.size();i++){
      
      cout<<ans[i]<<" ";
  }
  
  cout<<endl;
  
  return 0;
}

/*
‚úÖ Time and Space Complexity:
Time: O(n * m) (every element visited once)

Space: O(1) (if we print directly) or O(n*m) (if storing in a list)
*/